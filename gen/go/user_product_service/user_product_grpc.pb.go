// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: user_product.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_CreateUser_FullMethodName           = "/user_product.UserService/CreateUser"
	UserService_GetUserById_FullMethodName          = "/user_product.UserService/GetUserById"
	UserService_UpdateUserById_FullMethodName       = "/user_product.UserService/UpdateUserById"
	UserService_DeleteUserById_FullMethodName       = "/user_product.UserService/DeleteUserById"
	UserService_CreateFavorite_FullMethodName       = "/user_product.UserService/CreateFavorite"
	UserService_GetFavoritesByUserId_FullMethodName = "/user_product.UserService/GetFavoritesByUserId"
	UserService_UpdateFavoriteById_FullMethodName   = "/user_product.UserService/UpdateFavoriteById"
	UserService_DeleteFavoriteById_FullMethodName   = "/user_product.UserService/DeleteFavoriteById"
	UserService_CreatePocket_FullMethodName         = "/user_product.UserService/CreatePocket"
	UserService_GetPocketsByUserId_FullMethodName   = "/user_product.UserService/GetPocketsByUserId"
	UserService_UpdatePocketById_FullMethodName     = "/user_product.UserService/UpdatePocketById"
	UserService_DeletePocketById_FullMethodName     = "/user_product.UserService/DeletePocketById"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// @Trigger: I think we can do all methods here, as doing separate services
// for pockets, countrycode and verification seems unnecessary to me.
type UserServiceClient interface {
	// User Management
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*User, error)
	UpdateUserById(ctx context.Context, in *UpdateUserByIdRequest, opts ...grpc.CallOption) (*User, error)
	DeleteUserById(ctx context.Context, in *DeleteUserByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Favorites Management
	CreateFavorite(ctx context.Context, in *CreateFavoriteRequest, opts ...grpc.CallOption) (*Favorite, error)
	GetFavoritesByUserId(ctx context.Context, in *GetFavoritesByUserIdRequest, opts ...grpc.CallOption) (*GetFavoritesByUserIdResponse, error)
	UpdateFavoriteById(ctx context.Context, in *UpdateFavoriteByIdRequest, opts ...grpc.CallOption) (*Favorite, error)
	DeleteFavoriteById(ctx context.Context, in *DeleteFavoriteByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Pockets Management
	CreatePocket(ctx context.Context, in *CreatePocketRequest, opts ...grpc.CallOption) (*Pocket, error)
	GetPocketsByUserId(ctx context.Context, in *GetPocketsByUserIdRequest, opts ...grpc.CallOption) (*GetPocketsByUserIdResponse, error)
	UpdatePocketById(ctx context.Context, in *UpdatePocketByIdRequest, opts ...grpc.CallOption) (*Pocket, error)
	DeletePocketById(ctx context.Context, in *DeletePocketByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_GetUserById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserById(ctx context.Context, in *UpdateUserByIdRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_UpdateUserById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserById(ctx context.Context, in *DeleteUserByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUserById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateFavorite(ctx context.Context, in *CreateFavoriteRequest, opts ...grpc.CallOption) (*Favorite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Favorite)
	err := c.cc.Invoke(ctx, UserService_CreateFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetFavoritesByUserId(ctx context.Context, in *GetFavoritesByUserIdRequest, opts ...grpc.CallOption) (*GetFavoritesByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFavoritesByUserIdResponse)
	err := c.cc.Invoke(ctx, UserService_GetFavoritesByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateFavoriteById(ctx context.Context, in *UpdateFavoriteByIdRequest, opts ...grpc.CallOption) (*Favorite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Favorite)
	err := c.cc.Invoke(ctx, UserService_UpdateFavoriteById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteFavoriteById(ctx context.Context, in *DeleteFavoriteByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteFavoriteById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreatePocket(ctx context.Context, in *CreatePocketRequest, opts ...grpc.CallOption) (*Pocket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pocket)
	err := c.cc.Invoke(ctx, UserService_CreatePocket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetPocketsByUserId(ctx context.Context, in *GetPocketsByUserIdRequest, opts ...grpc.CallOption) (*GetPocketsByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPocketsByUserIdResponse)
	err := c.cc.Invoke(ctx, UserService_GetPocketsByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdatePocketById(ctx context.Context, in *UpdatePocketByIdRequest, opts ...grpc.CallOption) (*Pocket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pocket)
	err := c.cc.Invoke(ctx, UserService_UpdatePocketById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeletePocketById(ctx context.Context, in *DeletePocketByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, UserService_DeletePocketById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
//
// @Trigger: I think we can do all methods here, as doing separate services
// for pockets, countrycode and verification seems unnecessary to me.
type UserServiceServer interface {
	// User Management
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	GetUserById(context.Context, *GetUserByIdRequest) (*User, error)
	UpdateUserById(context.Context, *UpdateUserByIdRequest) (*User, error)
	DeleteUserById(context.Context, *DeleteUserByIdRequest) (*DeleteResponse, error)
	// Favorites Management
	CreateFavorite(context.Context, *CreateFavoriteRequest) (*Favorite, error)
	GetFavoritesByUserId(context.Context, *GetFavoritesByUserIdRequest) (*GetFavoritesByUserIdResponse, error)
	UpdateFavoriteById(context.Context, *UpdateFavoriteByIdRequest) (*Favorite, error)
	DeleteFavoriteById(context.Context, *DeleteFavoriteByIdRequest) (*DeleteResponse, error)
	// Pockets Management
	CreatePocket(context.Context, *CreatePocketRequest) (*Pocket, error)
	GetPocketsByUserId(context.Context, *GetPocketsByUserIdRequest) (*GetPocketsByUserIdResponse, error)
	UpdatePocketById(context.Context, *UpdatePocketByIdRequest) (*Pocket, error)
	DeletePocketById(context.Context, *DeletePocketByIdRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) GetUserById(context.Context, *GetUserByIdRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserById(context.Context, *UpdateUserByIdRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserById not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserById(context.Context, *DeleteUserByIdRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserById not implemented")
}
func (UnimplementedUserServiceServer) CreateFavorite(context.Context, *CreateFavoriteRequest) (*Favorite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFavorite not implemented")
}
func (UnimplementedUserServiceServer) GetFavoritesByUserId(context.Context, *GetFavoritesByUserIdRequest) (*GetFavoritesByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoritesByUserId not implemented")
}
func (UnimplementedUserServiceServer) UpdateFavoriteById(context.Context, *UpdateFavoriteByIdRequest) (*Favorite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFavoriteById not implemented")
}
func (UnimplementedUserServiceServer) DeleteFavoriteById(context.Context, *DeleteFavoriteByIdRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFavoriteById not implemented")
}
func (UnimplementedUserServiceServer) CreatePocket(context.Context, *CreatePocketRequest) (*Pocket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePocket not implemented")
}
func (UnimplementedUserServiceServer) GetPocketsByUserId(context.Context, *GetPocketsByUserIdRequest) (*GetPocketsByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPocketsByUserId not implemented")
}
func (UnimplementedUserServiceServer) UpdatePocketById(context.Context, *UpdatePocketByIdRequest) (*Pocket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePocketById not implemented")
}
func (UnimplementedUserServiceServer) DeletePocketById(context.Context, *DeletePocketByIdRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePocketById not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserById(ctx, req.(*GetUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserById(ctx, req.(*UpdateUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserById(ctx, req.(*DeleteUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateFavorite(ctx, req.(*CreateFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetFavoritesByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoritesByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetFavoritesByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetFavoritesByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetFavoritesByUserId(ctx, req.(*GetFavoritesByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateFavoriteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFavoriteByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateFavoriteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateFavoriteById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateFavoriteById(ctx, req.(*UpdateFavoriteByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteFavoriteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFavoriteByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteFavoriteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteFavoriteById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteFavoriteById(ctx, req.(*DeleteFavoriteByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreatePocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreatePocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreatePocket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreatePocket(ctx, req.(*CreatePocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetPocketsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPocketsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetPocketsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetPocketsByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetPocketsByUserId(ctx, req.(*GetPocketsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdatePocketById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePocketByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdatePocketById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdatePocketById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdatePocketById(ctx, req.(*UpdatePocketByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeletePocketById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePocketByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeletePocketById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeletePocketById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeletePocketById(ctx, req.(*DeletePocketByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_product.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _UserService_GetUserById_Handler,
		},
		{
			MethodName: "UpdateUserById",
			Handler:    _UserService_UpdateUserById_Handler,
		},
		{
			MethodName: "DeleteUserById",
			Handler:    _UserService_DeleteUserById_Handler,
		},
		{
			MethodName: "CreateFavorite",
			Handler:    _UserService_CreateFavorite_Handler,
		},
		{
			MethodName: "GetFavoritesByUserId",
			Handler:    _UserService_GetFavoritesByUserId_Handler,
		},
		{
			MethodName: "UpdateFavoriteById",
			Handler:    _UserService_UpdateFavoriteById_Handler,
		},
		{
			MethodName: "DeleteFavoriteById",
			Handler:    _UserService_DeleteFavoriteById_Handler,
		},
		{
			MethodName: "CreatePocket",
			Handler:    _UserService_CreatePocket_Handler,
		},
		{
			MethodName: "GetPocketsByUserId",
			Handler:    _UserService_GetPocketsByUserId_Handler,
		},
		{
			MethodName: "UpdatePocketById",
			Handler:    _UserService_UpdatePocketById_Handler,
		},
		{
			MethodName: "DeletePocketById",
			Handler:    _UserService_DeletePocketById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_product.proto",
}
